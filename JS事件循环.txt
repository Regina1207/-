内存讲解
1.所有的js都在栈里面执行
2.栈是js模拟出来的，堆是c、c++写的
3.基本数据类型存在栈里面，存的是值
4.引用数据类型存的是地址，地址存在栈里面（引用数据类型存在堆里面）

栈的进出规则：先进后出，后进先出（栈溢出）
任务队列里面的进出规则：先进先出，后进后出

如何优化长列表？ 
    
JS事件循环
1.宏任务：定时器、script代码片段、I/O操作、UI渲染、requestAnimationFrame
2.微任务：Promise()（同步）、MutationObserver(vue)、process.nextTick、mutataion（同步）、Object     

【process.nextTick:立即执行函数，回调函数立即执行。只存在node环境中，除了主线程其他都需要让步】
【setImmediate：立即执行函数，宏任务】
以上两种都是node环境才有的 

event loop事件循环
UI渲染优先级最高（浏览器）
IS解析引擎和UI渲染引擎是互斥的
UI渲染的时候，js停止，不创建，有一个引擎不执行，等渲染完成才开始执行

1.JS在栈里面执行，JS在主线程上从上到下执行
2.主线程优先执行同步代码
3.任务队列里面存入（JS引擎推入到任务队列）异步代码（ajax、回调、递归、定时器等）
4.主线程执行完所有的同步代码，才去检查任务队列中是否有异步任务（主线程空闲时，才去检查任务队列）
5.先检查上一个宏任务有没有遗留下来的微任务
6.如果没有微任务，则执行下一个宏任务
7.重复4、5、6步骤，形成下一个循环



node环境
在node事件循环中一共有六个阶段
第一个阶段只负责定时器执行
setImmediate只在第五阶段执行（check阶段）
node版本中：v10.10版本之前setImmediate和timer定时器不一定谁先执行

优先级：同步代码>process.nextTick()>timer(定时器)>setImmediate
结论：1.同步代码最先执行
    2.process.nextTick()
    3.微任务
    4.timers
    5.setImmediate

